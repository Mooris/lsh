(define (test2-comp fct lst arg result)
  (cond ((eq? (length (command-line)) 1)
         (test-comp fct lst arg result))
        ((equal? (cadr (command-line)) "info") (display " compose ") (display " : ") (display arg) (newline))
        ((equal? (cadr (command-line)) "compose")
         (test-comp fct lst arg result))))

(define (test-comp fct lst arg result)
  (let* ((name "compose")
         (r1 (apply fct lst))
         (r (apply r1 arg)))
    (cond ((equal? r result) (display name) (display " : OK"))
          ((eq? r 'undefined) (display name) (display " : UNDEFINED"))
          (#t (display name) (display " : KO ")
              (display arg) (display " = ")
              (display r) (display " != ") (display result)))
    (newline)
    ))
(display '(test2-comp compose (list (list (lambda (x) (* x 2)) car)) '((21 42)) 42))
(newline)
